@model Store.WebApp.ViewModels.LocationWithOrderAndInventoryViewModel

@{
    ViewData["Title"] = "Create";
}

<h1>Create Order</h1>
<hr />
<div>
    @if (Model.Inventory.Count > 0)
    {
        <h5>@Html.DisplayFor(model => model.Name)</h5>
        <hr />
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Inventory.First().Name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Inventory.First().Description)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Inventory.First().Price)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Inventory.First().Quantity)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Inventory.First().OrderLimit)
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Inventory)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Description)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Price)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Quantity)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.OrderLimit)
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@* Current Order List *@
@if(Model.Sales != null && Model.Sales.Count > 0)
{
<div>
    <h5>Current Order</h5>
    <hr />
    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Sales.First().ProductName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Sales.First().PurchasePrice)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Sales.First().Quantity)
                </th>
            </tr>
        </thead>
        <tbody>
@foreach (var item in Model.Sales)
{
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.ProductName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PurchasePrice)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Quantity)
                </td>
            </tr>
}
        </tbody>
    </table>
</div>
}

<div class="row">
    <div class="col-md-4">
        <form asp-action="Add">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                @Html.DropDownList("Inventory")
            </div>
            <div class="form-group">
                <label class="control-label" for="Quantity">Quantity</label>
                <input class="form-check" type="number" id="Quantity" name="Quantity" min="1"/>
            </div>
            <div class="form-group">
                <input type="submit" value="Add" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <form asp-action="Create">
        <div>
            <input type="submit" value="Create" class="btn btn-primary" />
        </div>
    </form>
</div>

<div>
    <a asp-action="Cancel">Cancel Order</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
